{"version":3,"sources":["container/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","utils/Yelp.js","container/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","sortByOptions","handleLocationChange","event","setState","location","target","value","handleSearch","state","term","sortBy","searchYelp","preventDefault","handleTermChange","bind","sortByOption","this","Object","keys","map","sortByOptionValue","key","className","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","React","Component","Business","business","src","imageSrc","alt","name","split","join","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","alias","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec9f7ada.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        //Se tiene que bind porque este se declaro, haciendo que su this pierda su contexto\r\n        //En cambio si se usa arrow function como los otros, this no pierde su contexto\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    sortByOptions = {\r\n        'Best Match': 'best_match',\r\n        'Highest Rated': 'rating',\r\n        'Most Reviewed': 'review_count'\r\n    }\r\n\r\n    getSortByClass(sortByOption){\r\n        if(this.state.sortBy === sortByOption){\r\n            return 'active';\r\n        }else{\r\n            return '';\r\n        }\r\n    }\r\n\r\n    handleSortByChange(sortByOption){\r\n        this.setState({ sortBy: sortByOption });\r\n    }\r\n\r\n    handleTermChange(event){\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    handleLocationChange = event => {\r\n        this.setState({ location: event.target.value });\r\n    }\r\n\r\n    handleSearch = event =>{\r\n        const { term, location, sortBy } = this.state;\r\n        this.props.searchYelp(term, location, sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions(){\r\n        return Object.keys(this.sortByOptions).map(sortByOption =>{\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li \r\n                key={ sortByOptionValue }\r\n                className={ this.getSortByClass(sortByOptionValue) } \r\n                onClick={ this.handleSortByChange.bind(this, sortByOptionValue) }\r\n                >\r\n                    { sortByOption }\r\n                </li>;\r\n        });\r\n    }\r\n    render(){\r\n        return (\r\n        <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n                <h2>Search the restaurant which you desire</h2>\r\n                <ul>\r\n                    {this.renderSortByOptions()}\r\n                </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n                <input placeholder=\"Search Businesses\" onChange={ this.handleTermChange } />\r\n                <input placeholder=\"Where?\" onChange={ this.handleLocationChange } />\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n                <button onClick={ this.handleSearch }>Let's Go</button>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Business.css';\r\n\r\nconst Business = ({ business }) =>{\r\n    return (\r\n        <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                <img src={ business.imageSrc } alt='the restaurant'/>\r\n            </div>\r\n            <h2>{ business.name.split('-').join(' ') }</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                    <p>{ business.address }</p>\r\n                    <p>{ business.city }</p>\r\n                    <p>{ business.state + business.zipCode }</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                    <h3>{ business.category }</h3>\r\n                    <h3 className=\"rating\">{ business.rating }</h3>\r\n                    <p>{ business.reviewCount + 'reviews' }</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nconst BusinessList = ({ businesses }) =>{\r\n    return (\r\n        <div className=\"BusinessList\">\r\n            {businesses.map(business => {\r\n                    return <Business business={ business } key={ business.id }/>;\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BusinessList;","const apiKey = 'G6uQTX_1S3mRbZtjQ_RACm_fxADNN2t7Q2BlEqfYdD0jOYnN8JcHR5f49r7mUuHOtGUQzXG1w7Li3ORIRN503k9kpHn3RUInO1ceXdx7wVxnEwxk6yK5y30cZcSMXXYx';\r\n/* const clientID = '03o273XrwEGUK8-mhsGbRQ'; */\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy){\r\n        return fetch(\r\n            `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, \r\n            {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        })\r\n        .then(response =>{\r\n            return response.json();\r\n        })\r\n        .then(jsonResponse =>{\r\n            if(jsonResponse.businesses){\r\n                return jsonResponse.businesses.map(business =>{\r\n                    return {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.alias,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count,\r\n                        /* url: business.url */\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Yelp","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport BusinessList from '../../components/BusinessList/BusinessList';\nimport Yelp from '../../utils/Yelp';\n\nclass App extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            businesses: []\n        };\n    }\n\n    searchYelp = (term, location, sortBy) =>{\n        Yelp.search(term, location, sortBy)\n        .then(businesses =>{\n            this.setState({ businesses: businesses });\n        });\n\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <h1>ravenous</h1>\n                <SearchBar searchYelp={ this.searchYelp } />\n                <BusinessList businesses={ this.state.businesses } /> \n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}